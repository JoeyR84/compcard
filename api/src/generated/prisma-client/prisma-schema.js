module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateRoute {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createRoute(data: RouteCreateInput!): Route!
  updateRoute(data: RouteUpdateInput!, where: RouteWhereUniqueInput!): Route
  updateManyRoutes(data: RouteUpdateManyMutationInput!, where: RouteWhereInput): BatchPayload!
  upsertRoute(where: RouteWhereUniqueInput!, create: RouteCreateInput!, update: RouteUpdateInput!): Route!
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteManyRoutes(where: RouteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  route(where: RouteWhereUniqueInput!): Route
  routes(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Route]!
  routesConnection(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RouteConnection!
  node(id: ID!): Node
}

type Route {
  id: ID!
  createdAt: DateTime!
  title: String!
  points: Int!
  attempts: Int!
}

type RouteConnection {
  pageInfo: PageInfo!
  edges: [RouteEdge]!
  aggregate: AggregateRoute!
}

input RouteCreateInput {
  id: ID
  title: String!
  points: Int!
  attempts: Int!
}

type RouteEdge {
  node: Route!
  cursor: String!
}

enum RouteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  points_ASC
  points_DESC
  attempts_ASC
  attempts_DESC
}

type RoutePreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  points: Int!
  attempts: Int!
}

type RouteSubscriptionPayload {
  mutation: MutationType!
  node: Route
  updatedFields: [String!]
  previousValues: RoutePreviousValues
}

input RouteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RouteWhereInput
  AND: [RouteSubscriptionWhereInput!]
  OR: [RouteSubscriptionWhereInput!]
  NOT: [RouteSubscriptionWhereInput!]
}

input RouteUpdateInput {
  title: String
  points: Int
  attempts: Int
}

input RouteUpdateManyMutationInput {
  title: String
  points: Int
  attempts: Int
}

input RouteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  AND: [RouteWhereInput!]
  OR: [RouteWhereInput!]
  NOT: [RouteWhereInput!]
}

input RouteWhereUniqueInput {
  id: ID
}

type Subscription {
  route(where: RouteSubscriptionWhereInput): RouteSubscriptionPayload
}
`
      }
    